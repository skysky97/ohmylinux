" Name:     vim configuration
" Author:   liyunting<pourlove@msn.cn>
" URL:      https://github.com/skysky97/ohmylinux
"
" Generic {{{
" ----------------------------------------------------------------------------
syntax enable
set encoding=utf-8
set hidden
set nocompatible
set updatetime=300
set nobackup
set nowritebackup
set laststatus=1
set cmdheight=1
set mouse=a
" Set cache directory, '//' means include folders into swap file name which
" avoid file name conflict.
if !isdirectory($HOME . "/.cache/vim")
    call mkdir($HOME . "/.cache/vim")
endif
set directory=~/.cache/vim//
nnoremap <Space> <Nop>
" }}}

" Plugin {{{
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')
Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn --install --frozen-lockfile'}
"Plug 'airblade/vim-gitgutter'
Plug 'kevinoid/vim-jsonc'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'monkoose/vim9-stargate'
call plug#end()
" }}}

" Style {{{
" ----------------------------------------------------------------------------
set number
set signcolumn=number
set nowrap
set linebreak
set breakindent
set breakindentopt=shift:4
set smartindent
set expandtab
set tabstop=4
set shiftwidth=4
set backspace=indent,eol,start
set ruler
autocmd FileType cpp setlocal commentstring=//%s
" }}}

" Color & Theme {{{
" ----------------------------------------------------------------------------
autocmd ColorScheme * :call <SID>do_highlight()
function! s:do_highlight()
  set t_Co=16
  " float window
  hi Pmenu cterm=none ctermfg=Cyan ctermbg=Black
  hi PmenuSbar cterm=none ctermfg=Cyan ctermbg=DarkGray
  hi Property cterm=none ctermfg=Magenta
  hi ToolBarLine cterm=none ctermfg=Cyan ctermbg=DarkGray
  " coc semantic tokens
  hi link CocSem_property Property
  hi link CocSem_namespace Normal
  hi link CocSem_variable Normal
  hi link CocSem_parameter Normal
  hi link CocSem_operator Type
  " vim9-stargate
  hi link StargateMain Special
  hi link StargateSecondary Type
endfunction

set t_Co=16
set background=dark
" coc semantic highlight
let g:coc_default_semantic_highlight_groups=1
let g:solarized_termcolors=16
let g:solarized_termtrans=0
colorscheme solarized
" }}}

" Navigation {{{
" ----------------------------------------------------------------------------
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" switch c/c++ source header
nmap <silent> gf :CocCommand clangd.switchSourceHeader<CR>
" switch buffers
nmap <silent> gn :bprev<CR>
nmap <silent> gp :bnext<CR>
" coc-lists pre/next
nnoremap <silent><nowait> gj :<C-u>CocNext<CR>
nnoremap <silent><nowait> gk :<C-u>CocPrev<CR>
" show documentation in preview window.
nnoremap <silent> gh :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" }}}

" Search & Explore  {{{
" ----------------------------------------------------------------------------
" search file
nmap <C-p> :CocList files<CR>
" search recently opened file
nmap <Space>m :CocList mru<CR>
nmap <Space>b :CocList buffers<CR>
nmap <Space>B :buffers<CR>:buffer
" search semantic symbol
nmap <Space>s :exe 'CocList -I --normal --input='.expand('<cword>').' symbols'<CR>
nmap <Space>S :CocList -I symbols<CR>
" search word in current buffer
nmap <Space>/ :exe 'CocList -I --normal --input='.expand('<cword>').' words'<CR>
" search word in cwd
nmap <Space>w :exe 'CocList -I --normal --input='.expand('<cword>').' grep -w'<CR>
nmap <Space>W :CocList -I grep -w<CR>
nmap <Space>a :CocList -I grep -e<CR>
" explore outline
nmap <Space>o :CocList outline<CR>
" explore project
nmap <Space>e :CocCommand explorer --quit-on-open<CR>
nmap <Space>E :CocCommand explorer --width 80 --quit-on-open<CR>
nnoremap <silent><nowait> <Space>p :<C-u>CocListResume<CR>
" buildin explorer
nmap <leader>e :Explore<CR>
" }}}

" Refactor  {{{
" ----------------------------------------------------------------------------
nmap <leader>fw <plug>(coc-cursors-word)
xmap <leader>fw <plug>(coc-cursors-range)
nmap <leader>fR <plug>(coc-refactor)
nmap <leader>fr <plug>(coc-rename)
nmap <leader>ff <plug>(coc-format-selected)
xmap <leader>ff <plug>(coc-format-selected)
nmap <leader>fq <plug>(coc-fix-current)
" }}}

" Selection  {{{
" ----------------------------------------------------------------------------
" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)
" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" }}}

" Completion  {{{
" ----------------------------------------------------------------------------
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" use ctrl+l for trigger completion
inoremap <silent><expr> <c-l> coc#refresh()

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" }}}

" Snippets {{{
" ----------------------------------------------------------------------------

" }}}

" vim9-stargate {{{
" ----------------------------------------------------------------------------
noremap gs <Cmd>call stargate#ok_vim(1)<CR>
noremap gS <Cmd>call stargate#ok_vim(2)<CR>
" }}}

" coc.nvim {{{
" ----------------------------------------------------------------------------
let g:coc_global_extensions = [
            \"coc-clangd",
            \"coc-cmake",
            \"coc-explorer",
            \"coc-git",
            \"coc-highlight",
            \"coc-java",
            \"coc-jedi",
            \"coc-json",
            \"coc-lists",
            \"coc-marketplace",
            \"coc-rls",
            \"coc-sh",
            \"coc-snippets",
            \"coc-todolist",
            \"coc-tsserver",
            \"coc-ultisnips",
            \"coc-vimlsp",
            \"coc-word",
            \"coc-xml"
            \]
" }}}

" git {{{
" ----------------------------------------------------------------------------
" navigate chunks of current buffer
nmap <leader>hk <Plug>(coc-git-prevchunk)
nmap <leader>hj <Plug>(coc-git-nextchunk)
nmap <leader>hu :CocCommand git.chunkUndo<CR>
nmap <leader>hs :CocCommand git.chunkStage<CR>
nmap <leader>hi <Plug>(coc-git-chunkinfo)
" navigate conflicts of current buffer
nmap <leader>ck <Plug>(coc-git-prevconflict)
nmap <leader>cj <Plug>(coc-git-nextconflict)
" create text object for git chunks
omap ig <Plug>(coc-git-chunk-inner)
xmap ig <Plug>(coc-git-chunk-inner)
omap ag <Plug>(coc-git-chunk-outer)
xmap ag <Plug>(coc-git-chunk-outer)

nmap <Space>gl :CocList bcommits<CR>
nmap <Space>gL :CocList commits<CR>
nmap <Space>gs :CocList gstatus<CR>
nmap <Space>gf :CocList gfiles 

" show commit contains current position
nmap gm <Plug>(coc-git-commit)
nmap gb :call <SID>gitblame()<CR>
function! s:gitblame()
    echo get(b:, 'coc_git_blame', '')
endfunction
" }}}

" Termdebug {{{
" ----------------------------------------------------------------------------
nmap <silent> <leader>d :packadd termdebug<CR>:Termdebug<CR>
nmap <F5>       :Continue<CR>
nmap <F10>      :Over<CR>
nmap <F11>      :Step<CR>
nmap <F9>       :Break<CR>
nmap <S-F9>     :Clear<CR>
nmap <S-F5>     :Stop<CR>
nmap <C-S-F5>   :Run<CR>
" }}}

" End  {{{
" ----------------------------------------------------------------------------
" vim:foldmethod=marker:foldlevel=0
" }}}

